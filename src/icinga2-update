#!/usr/bin/env python3

import argparse
import sys
import socket
import json
import urllib3
import os
import logging
import json
from pathlib import Path

import requests
import yaml

LOGGER = logging.getLogger(__name__)

#Â Disable warnings when connecting to icinga2 servers with invalid cert
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class ApiConnector(object):
    def __init__(self, server, port, protocol='https'):
        self.api_url = '%s://%s:%s/v1' % (
            protocol,
            server,
            port
            )
        self.auth = (None, None)

    def set_auth(self, username, password):
        self.auth = (username, password)


def update_status(api_connector, hostname, service, status_code, status_msg):
    url = '%s/actions/process-check-result?service=%s!%s' % (
        api_connector.api_url,
        hostname,
        service
        )
    headers = {
        'Accept': 'application/json'
        }
    data = {
        'exit_status': status_code,
        'plugin_output': status_msg
        }

    r = requests.post(url, json.dumps(data), auth=api_connector.auth, headers=headers, verify=False)

    if r.status_code != 200:
        LOGGER.error(json.dumps(r.json(), indent=2))

def get_default_msg(status_code):
    if status_code == 0:
        msg = 'OK'
    elif status_code == 1:
        msg = 'Warning'
    elif status_code == 2:
        msg = 'Critical'
    else:
        msg = 'Unknown'

    return msg

def main():
    parser = argparse.ArgumentParser('Update icinga2 service status')
    parser.add_argument('--hostname', default=socket.getfqdn())
    parser.add_argument('--service', required=True)
    parser.add_argument('--status-code', type=int, default=0)
    parser.add_argument('--status-msg')
    parser.add_argument('--systemd', action='store_true')
    parser.add_argument('--exit-code', type=int)
    parser.add_argument('--config')
    args = parser.parse_args()

    status_code = args.status_code
    msg = args.status_msg

    if args.config:
        configfile = args.config
    else:
        configfile = str(Path.home() / '.icinga2-update')

    with open(configfile, 'r') as f:
        config = yaml.load(f)

    if args.exit_code:
        if args.exit_code == 0:
            status_code = 0
            msg = 'OK'
        else:
            status_code = 2
            msg = 'Failed with exit code %s' % args.exit_code
    elif args.systemd:
        service_result = os.environ['SERVICE_RESULT']
        exit_status = os.environ['EXIT_STATUS']
        msg = '%s: %s' % (service_result, exit_status)

        if exit_status == '0':
            status_code = 0
        else:
            status_code = 2

    if not msg:
        msg = get_default_msg(status_code)

    conn = ApiConnector(config['server'], config['port'])
    conn.set_auth(config['username'], config['password'])

    update_status(conn, args.hostname, args.service, status_code, msg)

if __name__ == '__main__':
    sys.exit(main())
