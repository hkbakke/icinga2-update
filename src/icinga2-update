#!/usr/bin/env python3

import argparse
import sys
import socket
import json
import urllib3
import os
import logging
from pathlib import Path

import requests
import yaml

LOGGER = logging.getLogger(__name__)

#Â Disable warnings when connecting to icinga2 servers with invalid cert
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class ApiCallError(Exception):
    pass

class ApiConnector(object):
    def __init__(self, server, port, protocol='https'):
        self.api_url = '%s://%s:%s/v1' % (
            protocol,
            server,
            port
            )
        self.auth = (None, None)

    def set_auth(self, username, password):
        self.auth = (username, password)

    def update(self, resource, data):
        url = '%s/%s' % (self.api_url, resource)
        headers = {'Accept': 'application/json'}
        r = requests.post(url, json.dumps(data), auth=self.auth, headers=headers, verify=False)

        if r.status_code != 200:
            error = json.dumps(r.json(), indent=2)
            raise ApiCallError(error)
        else:
            LOGGER.debug(json.dumps(r.json(), indent=2))

    def update_service_status(self, hostname, service, status_code, status_msg):
        resource = 'actions/process-check-result?service=%s!%s' % (
            hostname,
            service
            )
        data = {
            'exit_status': status_code,
            'plugin_output': status_msg
            }
        self.update(resource, data)

    def update_host_status(self, hostname, status_code, status_msg):
        resource = 'actions/process-check-result?host=%s' % hostname
        data = {
            'exit_status': status_code,
            'plugin_output': status_msg
            }
        self.update(resource, data)


def get_default_msg(status_code):
    if status_code == 0:
        msg = 'OK'
    elif status_code == 1:
        msg = 'Warning'
    elif status_code == 2:
        msg = 'Critical'
    else:
        msg = 'Unknown'

    return msg

def get_exit_code_status(exit_code):
    if exit_code == 0:
        status_code = 0
        msg = 'OK'
    else:
        status_code = 2
        msg = 'Failed with exit code %s' % exit_code

    return (status_code, msg)

def main():
    parser = argparse.ArgumentParser('Update icinga2 service status')
    parser.add_argument('--hostname', default=socket.getfqdn())
    parser.add_argument('--service')
    parser.add_argument('--status-code', type=int, default=0)
    parser.add_argument('--status-msg')
    parser.add_argument('--systemd', action='store_true')
    parser.add_argument('--exit-code', type=int)
    parser.add_argument('--config')
    parser.add_argument('--log-level', default='info')
    args = parser.parse_args()

    logger = logging.getLogger()
    logger.setLevel(args.log_level.upper())
    console = logging.StreamHandler()
    logger.addHandler(console)

    status_code = args.status_code
    msg = args.status_msg
    configfile = None
    config_paths = [
        args.config,
        str(Path.home() / '.icinga2-update'),
        '/etc/icinga2-update/config.yml'
    ]

    for i in config_paths:
        if i and os.path.exists(i):
            configfile = i
            break

    if not configfile:
        LOGGER.error('No configfile found')
        return 2

    with open(configfile, 'r') as f:
        config = yaml.load(f)

    if args.exit_code:
        status_code, msg = get_exit_code_status(args.exit_code)
    elif args.systemd:
        service_result = os.environ['SERVICE_RESULT']
        exit_status = os.environ['EXIT_STATUS']
        msg = '%s: %s' % (service_result, exit_status)

        if exit_status == '0':
            status_code = 0
        else:
            status_code = 2

    if not msg:
        msg = get_default_msg(status_code)

    conn = ApiConnector(config['server'], config['port'])
    conn.set_auth(config['username'], config['password'])

    try:
        if args.service:
            conn.update_service_status(args.hostname, args.service, status_code, msg)
        else:
            conn.update_host_status(args.hostname, status_code, msg)
    except ApiCallError as e:
        LOGGER.error(str(e))
        sys.exit(1)

if __name__ == '__main__':
    sys.exit(main())
